class ValidaCpf{
    constructor(cpf){
        this.cpf = cpf;
    Object.defineProperty(this, 'cpfLimpo', {
        enumerable: true,
        value: cpf.replace(/\D+/g, '')
        })
    

    }

    valida(){
        if(typeof this.cpfLimpo === 'undefined') return false;
        if(this.cpfLimpo.length !== 11) return false;
        if(this.isSequencia()) return;

        const cpfParcial = this.cpfLimpo.slice(0, -2);
        const digito1 = ValidaCpf.criaDigito(cpfParcial);
        const digito2 = ValidaCpf.criaDigito(cpfParcial + digito1);
        const novoCpf = cpfParcial + digito1 + digito2;
        console.log(novoCpf);

        return novoCpf === this.cpfLimpo
        
    }
    isSequencia(){
        const sequencia = this.cpfLimpo[0].repeat(this.cpfLimpo.length);
        if(sequencia === this.cpfLimpo) return;
    }

    static criaDigito(cpfParcial){
        const cpfArray = Array.from(cpfParcial);
        let regressivo = cpfArray.length + 1;
        const total = cpfArray.reduce((acumulador, valor) => {
            acumulador += (regressivo * Number(valor));
            regressivo--
            return acumulador;
        }, 0);
        const digito1 = 11 - (total % 11);
        return digito1 > 9 ? '0' : String(digito1);
    }



}

class GeraCPF{
    rand(min = 100000000, max = 999999999){
        return String(Math.floor(Math.random() * (max - min) + min));
    }

    cpfFormatado(cpf){
        const formatado = cpf.slice(0,3) + '.' + cpf.slice(3, 6) + '.' + cpf.slice(6, 9) + '-' + cpf.slice(9, 11)
        return formatado
    }

    geraNovoCPF(){
        const cpfSemDigito = this.rand();
        const digito1 = ValidaCpf.criaDigito(cpfSemDigito);
        const digito2 = ValidaCpf.criaDigito(cpfSemDigito + digito1);
        const novoCpf = cpfSemDigito + digito1 + digito2;
        return this.cpfFormatado(novoCpf);
    }
}

(function() {
    const gera = new GeraCPF
    const cpfGerado = document.querySelector('.cpf-gerado');
    cpfGerado.innerHTML = gera.geraNovoCPF()
})()
